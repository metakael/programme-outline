"""
Database models for the Programme Outline Generator
"""

from datetime import datetime
from sqlalchemy.dialects.postgresql import JSON
from app import db  # Import from the main app

class ReferenceOutline(db.Model):
    """Model for preloaded reference outlines"""
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    content = db.Column(db.Text, nullable=False)  # Full outline content
    structure = db.Column(JSON, nullable=False)   # Parsed structure (segments, durations, etc.)
    embedding = db.Column(db.PickleType, nullable=True)  # Vector embedding for similarity search
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f'<ReferenceOutline {self.title}>'

    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

class GeneratedOutline(db.Model):
    """Model for outlines generated by users"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Optional user association
    title = db.Column(db.String(200), nullable=False)
    objectives = db.Column(db.Text, nullable=False)
    total_duration = db.Column(db.Integer, nullable=False)  # Duration in minutes
    specifications = db.Column(JSON, nullable=False)  # User-specified requirements
    content = db.Column(db.Text, nullable=False)  # Generated outline content
    reference_id = db.Column(db.Integer, db.ForeignKey('reference_outline.id'), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    reference = db.relationship('ReferenceOutline', backref='generated_outlines')
    user = db.relationship('User', backref='generated_outlines')
    
    def __repr__(self):
        return f'<GeneratedOutline {self.title}>'
    
    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            'id': self.id,
            'title': self.title,
            'objectives': self.objectives,
            'total_duration': self.total_duration,
            'specifications': self.specifications,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

class User(db.Model):
    """Basic user model for authentication and outline ownership"""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<User {self.username}>'
